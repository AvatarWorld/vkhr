#version 460 core

#include "sorting.glsl"

layout(local_size_x = 8,    local_size_y = 8) in;
layout(binding = 9, rgba8) uniform image2D color;

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    Node fragments[256];

    uint head_index = ppll_head_node(pixel);

    uint node_count = 0;

    // Copy over limited amounts of fragment to local storage.
    while (head_index != PPLL_NULL_NODE && node_count < 256) {
        fragments[node_count] = ppll_node(head_index);
        head_index = fragments[node_count].prev;
        node_count += 1; // Stop adding when it's full
    }

    // Does insertion sort based on depths.
    for (uint i = 1; i < node_count; ++i) {
        Node fragment = fragments[i];
        uint  j = i;

        while (j > 0 && fragment.depth > fragments[j-1].depth) {
            fragments[j] = fragments[j-1];
            j -= 1;
        }

        fragments[j] = fragment;
    }

    vec4 blended_colors = vec4(0, 0, 0, 1.0);

    // Blends fragments in "correct" order.
    for (uint i = 0; i < node_count; ++i) {
        blended_colors = mix(blended_colors,
                             fragments[i].color,
                             fragments[i].color.a);
    }

    imageStore(color, pixel, blended_colors);
}
